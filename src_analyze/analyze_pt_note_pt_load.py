import os
from elftools.elf.elffile import ELFFile

def open_file(file):
    '''
    Open the file and return the content of the file and the extension of the file
    '''
    analyze = None
    _, extension = os.path.splitext(file)
    if extension.lower() == '.elf':
        with open(file, 'rb') as f:
            analyze = f.read()
    return analyze, extension

def test_supported_extension(file):
    '''
    Test if the extension of the file is supported and return True if the extension of the file is supported, otherwise return False
    '''
    _, extension = os.path.splitext(file)
    if extension.lower() == '.elf':
        return True
    else:
        with open('/tmp/scan_result.txt', 'a') as f:
            f.write('Only ELF file can be analyzed for PT_NOTE and PT_LOAD sections\n')
        return False

def search_pt_note_pt_load(file):
    '''
    Search for the presence of PT_NOTE and PT_LOAD in the file
    '''
    analyze, _ = open_file(file)
    if analyze is None:
        return False
    compteur_note = 0
    compteur_load = 0

    with open(file, 'rb') as f:
        elf = ELFFile(f)
        for segment in elf.iter_segments():
            if segment.header.p_type == 'PT_NOTE':
                compteur_note += 1
            if segment.header.p_type == 'PT_LOAD':
                compteur_load += 1
    with open('/tmp/scan_result.txt', 'a') as f:
        f.write('\n\nRESULT OF THE ANALYZE PT_NOTE AND PT_LOAD')
        f.write(compteur_load)
        f.write(compteur_note)
    if compteur_note <=1 and compteur_load >= 4:
        return True
    else:
        return False

def search_for_injected_code(file_path):
    '''
    Search for injected code in the ELF file
    '''
    analyze, extension = open_file(file_path)
    if analyze is None:
        return False
    end_of_file = analyze[-100:] 
    suspicious_patterns = [b'\xCC', b'\x90']

    for pattern in suspicious_patterns:
        if pattern in end_of_file:
            return True

    return False

def analyze_file(file_path):
    
    pt_note = search_pt_note_pt_load(file_path)
    inject_code = search_for_injected_code(file_path)
    if pt_note and inject_code:
        with open('/tmp/scan_result.txt', 'a') as f:
            f.write('\n\nRESULT OF THE ANALYZE PT_NOTE AND PT_LOAD')
            f.write('\nFile contains PT_NOTE and PT_LOAD sections.')
            f.write('\nFile contains injected code.')
        return True
    elif pt_note:
        with open('/tmp/scan_result.txt', 'a') as f:
            f.write('\n\nRESULT OF THE ANALYZE PT_NOTE AND PT_LOAD')
            f.write('\nFile contains PT_NOTE and PT_LOAD sections.')
        return True
    elif inject_code:
        with open('/tmp/scan_result.txt', 'a') as f:
            f.write('\n\nRESULT OF THE ANALYZE PT_NOTE AND PT_LOAD')
            f.write('\nFile contains injected code.')
        return True
    else:
        with open('/tmp/scan_result.txt', 'a') as f:
            f.write('\n\nRESULT OF THE ANALYZE PT_NOTE AND PT_LOAD')
            f.write('\nFile is safe.\n')
        return False

if __name__ == "__main__":
    analyze_file('/home/morgane/gestion_des_exploits/CC1_Gestion_Exploits/print_network_config_elf_infected')
    
