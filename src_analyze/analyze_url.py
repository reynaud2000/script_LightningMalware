import os
import sys
import hvac
from pysafebrowsing import SafeBrowsing
from OTXv2 import OTXv2, IndicatorTypes

# Récupérer les clés API depuis Vault
def get_api_keys():
    client = hvac.Client(url=os.getenv('VAULT_ADDR'))
    client.token = os.getenv('VAULT_TOKEN')

    google_key = client.secrets.kv.v2.read_secret_version(path='Google_key')['data']['data']['key']
    otx_key = client.secrets.kv.v2.read_secret_version(path='OTX_key')['data']['data']['key']
    
    return google_key, otx_key

Google_key, OTX_key = get_api_keys()

def Analyse_urls_api_Google(url):
    client = SafeBrowsing(Google_key)
    res = client.lookup_urls([url])
    return res

def Analyse_urls_api_otx(url):
    otx_api = OTXv2(OTX_key)
    res = otx_api.get_indicator_details_full(IndicatorTypes.URL, url)
    return res

if __name__ == '__main__':
    if len(sys.argv) != 2:
        print("Usage: python analyze_url.py <url>")
        sys.exit(1)

    url = sys.argv[1]

    with open('/app/result_url.txt', 'a') as f:
        f.write("------------- SCAN URL ------------")
        # Analyse Google Safe Browsing
        try:
            resultat_google = Analyse_urls_api_Google(url)
            f.write("\n\nRESULT OF THE GOOGLE API")
            for info in resultat_google.items():
                f.write("\nFor this URL '{}' the analysis results are : ".format(info[0]))
                dictionnaire = info[1]
                for valeur in dictionnaire:
                    f.write("{}: {}\n".format(valeur, dictionnaire[valeur]))
                f.write("\n")
        except Exception as e:
            f.write(f"\nError in Google scan: {e}")

        # Analyse OTX
        f.write("\nRESULT OF THE OTX API")
        try:
            resultat_otx = Analyse_urls_api_otx(url)
            if 'url_list' in resultat_otx and isinstance(resultat_otx['url_list'], dict):
                url_list = resultat_otx['url_list'].get('url_list', [])
                if url_list:
                    for url_info in url_list:
                        result_info = url_info.get('result', {}).get('urlworker', {}).get('error')
                        if result_info:
                            f.write(f"\nThe URL is malicious.\nThreat Details: {result_info}")
                            break
                    else:
                        f.write("\nThe URL is not malicious.\n")
                else:
                    f.write("\nNo malicious information found for the URL.\n")
            else:
                f.write("\nNo malicious information found for the URL.\n")
        except Exception as e:
            f.write(f"\nError during OTX analysis: {e}\n")
