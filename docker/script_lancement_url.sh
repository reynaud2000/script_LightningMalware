#!/bin/bash

# Vérifie si une URL a été fournie en argument
if [ -z "$1" ]; then
    echo "Usage: $0 <absolute-path-to-url>"
    exit 1
fi

WORK_DIR="/script/script_LightningMalware"
URL_ANALYZE_DOCKERFILE_PATH="$WORK_DIR/docker/analyze_url"

# Construit le conteneur analyze_url
docker build -f $URL_ANALYZE_DOCKERFILE_PATH -t analyze_url $WORK_DIR/docker
if [ $? -ne 0 ]; then
    echo "Erreur lors de la construction de l'image analyze_url"
    exit 1
fi

# Attends que la construction soit terminée
wait

echo "L'image analyze_url a été construite."

# Supprime l'ancien conteneur s'il existe
docker rm -f analyze_url || true

# Démarre le conteneur analyze_url
docker run -d --name analyze_url analyze_url /bin/bash
if [ $? -ne 0 ]; then
    echo "Erreur lors du démarrage du conteneur analyze_url"
    exit 1
fi

# Attends que le conteneur soit démarré
wait

echo "Le conteneur analyze_url a été démarré."

# Copie les fichiers nécessaires dans le conteneur
docker cp $WORK_DIR/src_analyze/API_KEY.py analyze_url:/app/API_KEY.py
if [ $? -ne 0 ]; then
    echo "Erreur lors de la copie du fichier API_KEY.py dans le conteneur analyze_url"
    exit 1
fi

docker cp $WORK_DIR/src_analyze/analyze_url.py analyze_url:/app/analyze_url.py
if [ $? -ne 0 ]; then
    echo "Erreur lors de la copie du fichier analyze_url.py dans le conteneur analyze_url"
    exit 1
fi

# Exécute le script d'analyse dans le conteneur
docker exec analyze_url /venv/bin/python3 /app/analyze_url.py $1
if [ $? -ne 0 ]; then
    echo "Erreur lors de l'exécution du script analyze_url.py dans le conteneur analyze_url"
    exit 1
fi

# Récupére les résultats
docker cp analyze_url:/app/result_url.txt $WORK_DIR/result/result_url.txt
if [ $? -ne 0 ]; then
    echo "Erreur lors de la copie du fichier result_url.txt depuis le conteneur analyze_url"
    exit 1
fi

echo "Analyse de l'URL terminée et résultats récupérés."

exit 0
