#!/bin/bash
RANDOM_NUMBER=$RANDOM
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
LOGFILE="/tmp/log/script_lancement_file_${TIMESTAMP}_docker_${RANDOM_NUMBER}.log"
touch $LOGFILE

# Vérifiez les permissions du répertoire
echo "Permissions du répertoire /tmp/log/:" > $LOGFILE
ls -ld /tmp/log/ >> $LOGFILE 2>&1

# Vérifiez l'utilisateur exécutant le script
echo "Utilisateur exécutant le script:" >> $LOGFILE
whoami >> $LOGFILE 2>&1

# Essayez d'écrire dans le fichier log
echo "Test d'écriture dans le fichier log à $(date)" >> $LOGFILE

# Vérifiez les résultats
if [ $? -eq 0 ]; then
    echo "Écriture dans le fichier log réussie." >> $LOGFILE
else
    echo "Échec de l'écriture dans le fichier log." >> $LOGFILE
fi

# Vérifie si un fichier a été fourni en argument
if [ -z "$1" ]; then
    echo "Usage: $0 <absolute-path-to-file>" >> $LOGFILE
    exit 1
fi

# Génère un numéro aléatoire
RANDOM_NUMBER=$RANDOM

FILE_TO_SCAN=$1
FILE_NAME=$(basename "$FILE_TO_SCAN")

# Définit les chemins des Dockerfiles et le répertoire de travail
WORK_DIR="/script/script_LightningMalware"
CLAMAV_DOCKERFILE_PATH="$WORK_DIR/docker/clamav_daemon"
PYTHON_ANALYZE_DOCKERFILE_PATH="$WORK_DIR/docker/python_analyze"

# Vérifie si les conteneurs existent avant la construction
docker ps -a | grep clamav_daemon$RANDOM_NUMBER
if [ $? -eq 0 ]; then
    # Génère un nouveau numéro aléatoire
    RANDOM_NUMBER=$RANDOM
fi

docker ps -a | grep python_analyze$RANDOM_NUMBER
if [ $? -eq 0 ]; then
    # Génère un nouveau numéro aléatoire
    RANDOM_NUMBER=$RANDOM
fi

echo "Building Docker image..." >> $LOGFILE
# Construit les images à partir des Dockerfiles en utilisant le répertoire de travail correct
docker build -f $CLAMAV_DOCKERFILE_PATH -t clamav_daemon$RANDOM_NUMBER $WORK_DIR/docker >> $LOGFILE 2>&1
if [ $? -ne 0 ]; then
    echo "Erreur lors de la construction de l'image clamav_daemon$RANDOM_NUMBER" >> $LOGFILE
    exit 1
fi

docker build -f $PYTHON_ANALYZE_DOCKERFILE_PATH -t python_analyze$RANDOM_NUMBER $WORK_DIR/docker >> $LOGFILE 2>&1
if [ $? -ne 0 ]; then
    echo "Erreur lors de la construction de l'image python_analyze$RANDOM_NUMBER" >> $LOGFILE
    exit 1
fi

# Attends que toutes les constructions soient terminées
wait

echo "Toutes les images ont été construites." >> $LOGFILE

# Supprime les anciens conteneurs s'ils existent
docker rm -f clamav_daemon$RANDOM_NUMBER python_analyze$RANDOM_NUMBER 2>/dev/null

# Démarre les conteneurs avec l'option --rm pour les supprimer après leur arrêt
docker run --rm -d --name clamav_daemon$RANDOM_NUMBER clamav_daemon$RANDOM_NUMBER >> $LOGFILE 2>&1
if [ $? -ne 0 ];then
    echo "Erreur lors du démarrage du conteneur clamav_daemon$RANDOM_NUMBER" >> $LOGFILE
    exit 1
fi

docker run --rm -d --name python_analyze$RANDOM_NUMBER python_analyze$RANDOM_NUMBER >> $LOGFILE 2>&1
if [ $? -ne 0 ];then
    echo "Erreur lors du démarrage du conteneur python_analyze$RANDOM_NUMBER" >> $LOGFILE
    exit 1
fi

# Attends que les conteneurs soient démarrés
wait

echo "Tous les conteneurs ont été démarrés." >> $LOGFILE

# Mets à jour la base de données ClamAV
docker exec clamav_daemon$RANDOM_NUMBER freshclam >> $LOGFILE 2>&1
if [ $? -ne 0 ];then
    echo "Erreur lors de la mise à jour de la base de données ClamAV" >> $LOGFILE
    exit 1
fi

# Crée le répertoire /tmp/uploads dans les conteneurs si nécessaire
docker exec clamav_daemon$RANDOM_NUMBER mkdir -p /tmp/uploads >> $LOGFILE 2>&1
if [ $? -ne 0 ];then
    echo "Erreur lors de la création du répertoire /tmp/uploads dans clamav_daemon$RANDOM_NUMBER" >> $LOGFILE
    exit 1
fi

docker exec python_analyze$RANDOM_NUMBER mkdir -p /tmp/uploads >> $LOGFILE 2>&1
if [ $? -ne 0 ];then
    echo "Erreur lors de la création du répertoire /tmp/uploads dans python_analyze$RANDOM_NUMBER" >> $LOGFILE
    exit 1
fi

# Copie le fichier à scanner dans les conteneurs
docker cp "$FILE_TO_SCAN" clamav_daemon$RANDOM_NUMBER:/tmp/uploads/ >> $LOGFILE 2>&1
if [ $? -ne 0 ];then
    echo "Erreur lors de la copie du fichier dans clamav_daemon$RANDOM_NUMBER" >> $LOGFILE
    exit 1
fi

docker cp "$FILE_TO_SCAN" python_analyze$RANDOM_NUMBER:/tmp/uploads/ >> $LOGFILE 2>&1
if [ $? -ne 0 ];then
    echo "Erreur lors de la copie du fichier dans python_analyze$RANDOM_NUMBER" >> $LOGFILE
    exit 1
fi

docker cp $WORK_DIR/src_analyze python_analyze$RANDOM_NUMBER:/tmp/ >> $LOGFILE 2>&1
if [ $? -ne 0 ];then
    echo "Erreur lors de la copie du répertoire src_analyze dans python_analyze$RANDOM_NUMBER" >> $LOGFILE
    exit 1
fi

# Vérifie que les fichiers ont été copiés correctement
docker exec clamav_daemon$RANDOM_NUMBER ls /tmp/uploads/ >> $LOGFILE 2>&1
if [ $? -ne 0 ];then
    echo "Erreur : le fichier n'a pas été trouvé dans clamav_daemon$RANDOM_NUMBER" >> $LOGFILE
    exit 1
fi

# Suppression du fichier dans le dossier uploads
rm /uploads/$FILE_NAME >> $LOGFILE 2>&1
if [ $? -ne 0 ];then
    echo "Erreur : le fichier n'a pas été supprimé sur le serveur" >> $LOGFILE
    exit 1
fi

docker exec python_analyze$RANDOM_NUMBER ls /tmp/uploads/ >> $LOGFILE 2>&1
if [ $? -ne 0 ];then
    echo "Erreur : le fichier n'a pas été trouvé dans python_analyze$RANDOM_NUMBER" >> $LOGFILE
    exit 1
fi

# Attend que les copies soient terminées
wait

echo "Tous les fichiers ont été copiés dans les conteneurs." >> $LOGFILE

# Lance les scans PYTHON et anti-virus clamav et yara
docker exec clamav_daemon$RANDOM_NUMBER /scan.sh /tmp/uploads/"$FILE_NAME" >> $LOGFILE 2>&1 &
if [ $? -ne 0 ];then
    echo "Erreur lors de l'exécution du scan ClamAV et YARA" >> $LOGFILE
    exit 1
fi

docker exec python_analyze$RANDOM_NUMBER /venv/bin/python3 /tmp/src_analyze/main.py /tmp/uploads/"$FILE_NAME" >> $LOGFILE 2>&1
if [ $? -ne 0 ];then
    echo "Erreur lors de l'exécution du scan Python" >> $LOGFILE
    exit 1
fi

wait

echo "Tous les scans ont été effectués." >> $LOGFILE

# Récupére les résultats du conteneur vers le serveur
docker cp clamav_daemon$RANDOM_NUMBER:/tmp/scan_result.txt /script/script_LightningMalware/result/scan_result_clam.txt >> $LOGFILE 2>&1
if [ $? -ne 0 ];then
    echo "Erreur lors de la copie des résultats du scan ClamAV" >> $LOGFILE
    exit 1
fi

docker cp python_analyze$RANDOM_NUMBER:/tmp/scan_result.txt /script/script_LightningMalware/result/scan_result_python.txt >> $LOGFILE 2>&1
if [ $? -ne 0 ];then
    echo "Erreur lors de la copie des résultats du scan Python" >> $LOGFILE
    exit 1
fi

# Exécute le script de résultats
python3 /script/script_LightningMalware/src_analyze/script_result.py >> $LOGFILE 2>&1
if [ $? -ne 0 ];then
    echo "Erreur lors de l'exécution du script de résultats" >> $LOGFILE
    exit 1
fi

echo "Script terminé avec succès." >> $LOGFILE
exit 0
