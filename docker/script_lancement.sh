#!/bin/bash

# Vérifier si un fichier a été fourni en argument
if [ -z "$1" ]; then
    echo "Usage: $0 <absolute-path-to-file>"
    exit 1
fi

FILE_TO_SCAN=$1
FILE_NAME=$(basename "$FILE_TO_SCAN")

# Définir les chemins des Dockerfiles et le répertoire de travail
WORK_DIR="/script/script_LightningMalware"
CLAMAV_DOCKERFILE_PATH="$WORK_DIR/docker/clamav_daemon"
PYTHON_ANALYZE_DOCKERFILE_PATH="$WORK_DIR/docker/python_analyze"

# Construire les images à partir des Dockerfiles en utilisant le répertoire de travail correct
docker build -f $CLAMAV_DOCKERFILE_PATH -t clamav_daemon $WORK_DIR &
docker build -f $PYTHON_ANALYZE_DOCKERFILE_PATH -t python_analyze $WORK_DIR

# Attendre que toutes les constructions soient terminées
wait

echo "Toutes les images ont été construites."

# Supprimer les anciens conteneurs s'ils existent
docker rm -f clamav_daemon python_analyze

# Démarrer les conteneurs avec l'option --rm pour les supprimer après leur arrêt
docker run --rm -d --name clamav_daemon clamav_daemon &
docker run --rm -d --name python_analyze python_analyze

# Attendre que les conteneurs soient démarrés
wait

echo "Tous les conteneurs ont été démarrés."

# Mettre à jour la base de données ClamAV
docker exec clamav_daemon freshclam

# Créer le répertoire /tmp/uploads dans les conteneurs si nécessaire
docker exec clamav_daemon mkdir -p /tmp/uploads
docker exec python_analyze mkdir -p /tmp/uploads

# Copier le fichier à scanner dans les conteneurs
docker cp "$FILE_TO_SCAN" clamav_daemon:/tmp/uploads/
docker cp "$FILE_TO_SCAN" python_analyze:/tmp/uploads/
docker cp $WORK_DIR/src_analyze python_analyze:/tmp/

# Vérifier que les fichiers ont été copiés correctement
docker exec clamav_daemon ls /tmp/uploads/
docker exec python_analyze ls /tmp/uploads/

# Attendre que les copies soient terminées
wait

echo "Tous les fichiers ont été copiés dans les conteneurs."

# Lancer les scans
docker exec clamav_daemon /scan.sh /tmp/uploads/"$FILE_NAME" &
docker exec python_analyze python3 /tmp/src_analyze/main.py /tmp/uploads/"$FILE_NAME"

wait

echo "Tous les scans ont été effectués."

# Récupérer les résultats
if [ -f "/script/script_LightningMalware/result/scan_result_clam.txt" ]; then
    rm -f /script/script_LightningMalware/result/scan_result_clam.txt
fi
if [ -f "/script/script_LightningMalware/result/scan_result_python.txt" ]; then
    rm -f /script/script_LightningMalware/result/scan_result_python.txt
fi

docker cp clamav_daemon:/tmp/scan_result.txt /script/script_LightningMalware/result/scan_result_clam.txt
docker cp python_analyze:/tmp/scan_result.txt /script/script_LightningMalware/result/scan_result_python.txt

# Les conteneurs seront supprimés automatiquement grâce à l'option --rm

echo "Tous les conteneurs ont été supprimés."

# Exécuter le script de résultats
python3 /script/script_LightningMalware/src_analyze/script_result.py

exit 0
