#!/bin/bash

# Vérifie si un fichier a été fourni en argument
if [ -z "$1" ]; then
    echo "Usage: $0 <absolute-path-to-file>"
    exit 1
fi

FILE_TO_SCAN=$1
FILE_NAME=$(basename "$FILE_TO_SCAN")

# Définit les chemins des Dockerfiles et le répertoire de travail
WORK_DIR="/script/script_LightningMalware"
CLAMAV_DOCKERFILE_PATH="$WORK_DIR/docker/clamav_daemon"
PYTHON_ANALYZE_DOCKERFILE_PATH="$WORK_DIR/docker/python_analyze"

# Construits les images à partir des Dockerfiles en utilisant le répertoire de travail correct
docker build -f $CLAMAV_DOCKERFILE_PATH -t clamav_daemon $WORK_DIR/docker &
if [ $? -ne 0 ]; then
    echo "Erreur lors de la construction de l'image clamav_daemon"
    exit 1
fi

docker build -f $PYTHON_ANALYZE_DOCKERFILE_PATH -t python_analyze $WORK_DIR/docker
if [ $? -ne 0 ]; then
    echo "Erreur lors de la construction de l'image python_analyze"
    exit 1
fi

# Attends que toutes les constructions soient terminées
wait

echo "Toutes les images ont été construites."

# Supprime les anciens conteneurs s'ils existent
docker rm -f clamav_daemon python_analyze 2>/dev/null

# Démarre les conteneurs avec l'option --rm pour les supprimer après leur arrêt
docker run --rm -d --name clamav_daemon clamav_daemon &
if [ $? -ne 0 ]; then
    echo "Erreur lors du démarrage du conteneur clamav_daemon"
    exit 1
fi

docker run --rm -d --name python_analyze python_analyze
if [ $? -ne 0 ]; then
    echo "Erreur lors du démarrage du conteneur python_analyze"
    exit 1
fi

# Attends que les conteneurs soient démarrés
wait

echo "Tous les conteneurs ont été démarrés."

# Mets à jour la base de données ClamAV
docker exec clamav_daemon freshclam
if [ $? -ne 0 ]; then
    echo "Erreur lors de la mise à jour de la base de données ClamAV"
    exit 1
fi

# Crée le répertoire /tmp/uploads dans les conteneurs si nécessaire
docker exec clamav_daemon mkdir -p /tmp/uploads
if [ $? -ne 0 ]; then
    echo "Erreur lors de la création du répertoire /tmp/uploads dans clamav_daemon"
    exit 1
fi

docker exec python_analyze mkdir -p /tmp/uploads
if [ $? -ne 0 ]; then
    echo "Erreur lors de la création du répertoire /tmp/uploads dans python_analyze"
    exit 1
fi

# Copie le fichier à scanner dans les conteneurs
docker cp "$FILE_TO_SCAN" clamav_daemon:/tmp/uploads/
if [ $? -ne 0 ]; then
    echo "Erreur lors de la copie du fichier dans clamav_daemon"
    exit 1
fi

docker cp "$FILE_TO_SCAN" python_analyze:/tmp/uploads/
if [ $? -ne 0 ]; then
    echo "Erreur lors de la copie du fichier dans python_analyze"
    exit 1
fi

docker cp $WORK_DIR/src_analyze python_analyze:/tmp/
if [ $? -ne 0 ]; then
    echo "Erreur lors de la copie du répertoire src_analyze dans python_analyze"
    exit 1
fi

# Vérifie que les fichiers ont été copiés correctement
docker exec clamav_daemon ls /tmp/uploads/
if [ $? -ne 0 ]; then
    echo "Erreur : le fichier n'a pas été trouvé dans clamav_daemon"
    exit 1
fi

# Suppression du fichier dans le dossier uploads
# rm /uploads/$FILE_NAME
# if [ $? -ne 0 ]; then
#     echo "Erreur : le fichier n'a pas été supprimé sur le serveur"
#     exit 1
# fi

docker exec python_analyze ls /tmp/uploads/
if [ $? -ne 0 ]; then
    echo "Erreur : le fichier n'a pas été trouvé dans python_analyze"
    exit 1
fi

# Attend que les copies soient terminées
wait

echo "Tous les fichiers ont été copiés dans les conteneurs."

# Lance les scans PYTHON et anti-virus clamav et yara
docker exec clamav_daemon /scan.sh /tmp/uploads/"$FILE_NAME" &
if [ $? -ne 0 ]; then
    echo "Erreur lors de l'exécution du scan ClamAV et YARA"
    exit 1
fi

docker exec python_analyze python3 /tmp/src_analyze/main.py /tmp/uploads/"$FILE_NAME"
if [ $? -ne 0 ]; then
    echo "Erreur lors de l'exécution du scan Python"
    exit 1
fi

wait

echo "Tous les scans ont été effectués."

# Récupére les résultats du conteneur vers le serveur puis suppression des résultats dans le conteneur
if [ -f "/script/script_LightningMalware/result/scan_result_clam.txt" ]; then
    rm -f /script/script_LightningMalware/result/scan_result_clam.txt
    if [ $? -ne 0 ]; then
        echo "Erreur lors de la suppression de l'ancien scan_result_clam.txt"
        exit 1
    fi
fi

if [ -f "/script/script_LightningMalware/result/scan_result_python.txt" ]; then
    rm -f /script/script_LightningMalware/result/scan_result_python.txt
    if [ $? -ne 0 ]; then
        echo "Erreur lors de la suppression de l'ancien scan_result_python.txt"
        exit 1
    fi
fi

docker cp clamav_daemon:/tmp/scan_result.txt /script/script_LightningMalware/result/scan_result_clam.txt
if [ $? -ne 0 ]; then
    echo "Erreur lors de la copie des résultats du scan ClamAV"
    exit 1
fi

docker cp python_analyze:/tmp/scan_result.txt /script/script_LightningMalware/result/scan_result_python.txt
if [ $? -ne 0 ]; then
    echo "Erreur lors de la copie des résultats du scan Python"
    exit 1
fi

# Exécute le script de résultats
python3 /script/script_LightningMalware/src_analyze/script_result.py
if [ $? -ne 0 ]; then
    echo "Erreur lors de l'exécution du script de résultats"
    exit 1
fi

exit 0